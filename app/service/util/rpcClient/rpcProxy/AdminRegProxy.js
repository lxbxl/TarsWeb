// **********************************************************************
// Parsed By TarsParser(2.0.0), Generated By tools(20180620)
// TarsParser Maintained By <TARS> and tools Maintained By <superzheng>
// Generated from "AdminReg.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;
var _TARS_MODULE_A_ = require("./NodeDescriptorTars.js");

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var tars = tars || {};
module.exports.tars = tars;

tars.AdminRegProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

tars.AdminRegProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

tars.AdminRegProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

tars.AdminRegProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

tars.AdminRegProxy.prototype.getVersion = function () {
    return this._worker.version;
};

tars.tarsErrCode = {
    "EM_TARS_NODE_NOT_REGISTRY_ERR" : 1001,
    "EM_TARS_CALL_NODE_TIMEOUT_ERR" : 1002,
    "EM_TARS_LOAD_SERVICE_DESC_ERR" : 1003,
    "EM_TARS_SERVICE_STATE_ERR" : 1004,
    "EM_TARS_REQ_ALREADY_ERR" : 1005,
    "EM_TARS_INVALID_IP_ERR" : 1006,
    "EM_TARS_PARAMETER_ERR" : 1007,
    "EM_TARS_OTHER_ERR" : 1008,
    "EM_TARS_GET_PATCH_FILE_ERR" : 1009,
    "EM_TARS_PREPARE_ERR" : 1010,
    "EM_TARS_UNKNOWN_ERR" : -1,
    "EM_TARS_SUCCESS" : 0
};
tars.tarsErrCode._classname = "tars.tarsErrCode";
tars.tarsErrCode._write = function(os, tag, val) { return os.writeInt32(tag, val); };
tars.tarsErrCode._read  = function(is, tag, def) { return is.readInt32(tag, true, def); };

tars.EMTaskCommand = {
    "EM_CMD_START" : 0,
    "EM_CMD_STOP" : 1,
    "EM_CMD_PATCH" : 2,
    "EM_CMD_UNINSTALL" : 3
};
tars.EMTaskCommand._classname = "tars.EMTaskCommand";
tars.EMTaskCommand._write = function(os, tag, val) { return os.writeInt32(tag, val); };
tars.EMTaskCommand._read  = function(is, tag, def) { return is.readInt32(tag, true, def); };

tars.EMTaskStatus = {
    "EM_T_NOT_START" : 0,
    "EM_T_RUNNING" : 1,
    "EM_T_SUCCESS" : 2,
    "EM_T_FAILED" : 3,
    "EM_T_CANCEL" : 4,
    "EM_T_PARIAL" : 5
};
tars.EMTaskStatus._classname = "tars.EMTaskStatus";
tars.EMTaskStatus._write = function(os, tag, val) { return os.writeInt32(tag, val); };
tars.EMTaskStatus._read  = function(is, tag, def) { return is.readInt32(tag, true, def); };

tars.EMTaskItemStatus = {
    "EM_I_NOT_START" : 0,
    "EM_I_RUNNING" : 1,
    "EM_I_SUCCESS" : 2,
    "EM_I_FAILED" : 3,
    "EM_I_CANCEL" : 4
};
tars.EMTaskItemStatus._classname = "tars.EMTaskItemStatus";
tars.EMTaskItemStatus._write = function(os, tag, val) { return os.writeInt32(tag, val); };
tars.EMTaskItemStatus._read  = function(is, tag, def) { return is.readInt32(tag, true, def); };

tars.ServerStateDesc = function() {
    this.settingStateInReg = "";
    this.presentStateInReg = "";
    this.presentStateInNode = "";
    this.processId = 0;
    this.patchVersion = "";
    this.patchTime = "";
    this.patchUser = "";
    this._classname = "tars.ServerStateDesc";
};
tars.ServerStateDesc._classname = "tars.ServerStateDesc";
tars.ServerStateDesc._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.ServerStateDesc._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.ServerStateDesc._readFrom = function (is) {
    var tmp = new tars.ServerStateDesc;
    tmp.settingStateInReg = is.readString(0, true, "");
    tmp.presentStateInReg = is.readString(1, true, "");
    tmp.presentStateInNode = is.readString(2, true, "");
    tmp.processId = is.readInt32(3, true, 0);
    tmp.patchVersion = is.readString(4, true, "");
    tmp.patchTime = is.readString(5, true, "");
    tmp.patchUser = is.readString(6, true, "");
    return tmp;
};
tars.ServerStateDesc.prototype._writeTo = function (os) {
    os.writeString(0, this.settingStateInReg);
    os.writeString(1, this.presentStateInReg);
    os.writeString(2, this.presentStateInNode);
    os.writeInt32(3, this.processId);
    os.writeString(4, this.patchVersion);
    os.writeString(5, this.patchTime);
    os.writeString(6, this.patchUser);
};
tars.ServerStateDesc.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.ServerStateDesc.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.ServerStateDesc.prototype.toObject = function() { 
    return {
        "settingStateInReg" : this.settingStateInReg,
        "presentStateInReg" : this.presentStateInReg,
        "presentStateInNode" : this.presentStateInNode,
        "processId" : this.processId,
        "patchVersion" : this.patchVersion,
        "patchTime" : this.patchTime,
        "patchUser" : this.patchUser
    };
};
tars.ServerStateDesc.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "settingStateInReg") && (this.settingStateInReg = json.settingStateInReg);
    _hasOwnProperty.call(json, "presentStateInReg") && (this.presentStateInReg = json.presentStateInReg);
    _hasOwnProperty.call(json, "presentStateInNode") && (this.presentStateInNode = json.presentStateInNode);
    _hasOwnProperty.call(json, "processId") && (this.processId = json.processId);
    _hasOwnProperty.call(json, "patchVersion") && (this.patchVersion = json.patchVersion);
    _hasOwnProperty.call(json, "patchTime") && (this.patchTime = json.patchTime);
    _hasOwnProperty.call(json, "patchUser") && (this.patchUser = json.patchUser);
    return this;
};
tars.ServerStateDesc.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.ServerStateDesc.new = function () {
    return new tars.ServerStateDesc();
};
tars.ServerStateDesc.create = function (is) {
    return tars.ServerStateDesc._readFrom(is);
};

tars.TaskItemReq = function() {
    this.taskNo = "";
    this.itemNo = "";
    this.application = "";
    this.serverName = "";
    this.nodeName = "";
    this.setName = "";
    this.command = "";
    this.userName = "";
    this.parameters = new TarsStream.Map(TarsStream.String, TarsStream.String);
    this._classname = "tars.TaskItemReq";
};
tars.TaskItemReq._classname = "tars.TaskItemReq";
tars.TaskItemReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.TaskItemReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.TaskItemReq._readFrom = function (is) {
    var tmp = new tars.TaskItemReq;
    tmp.taskNo = is.readString(0, false, "");
    tmp.itemNo = is.readString(1, false, "");
    tmp.application = is.readString(2, false, "");
    tmp.serverName = is.readString(3, false, "");
    tmp.nodeName = is.readString(4, false, "");
    tmp.setName = is.readString(5, false, "");
    tmp.command = is.readString(6, false, "");
    tmp.userName = is.readString(7, false, "");
    tmp.parameters = is.readMap(8, false, TarsStream.Map(TarsStream.String, TarsStream.String));
    return tmp;
};
tars.TaskItemReq.prototype._writeTo = function (os) {
    os.writeString(0, this.taskNo);
    os.writeString(1, this.itemNo);
    os.writeString(2, this.application);
    os.writeString(3, this.serverName);
    os.writeString(4, this.nodeName);
    os.writeString(5, this.setName);
    os.writeString(6, this.command);
    os.writeString(7, this.userName);
    os.writeMap(8, this.parameters);
};
tars.TaskItemReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.TaskItemReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.TaskItemReq.prototype.toObject = function() { 
    return {
        "taskNo" : this.taskNo,
        "itemNo" : this.itemNo,
        "application" : this.application,
        "serverName" : this.serverName,
        "nodeName" : this.nodeName,
        "setName" : this.setName,
        "command" : this.command,
        "userName" : this.userName,
        "parameters" : this.parameters.toObject()
    };
};
tars.TaskItemReq.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "taskNo") && (this.taskNo = json.taskNo);
    _hasOwnProperty.call(json, "itemNo") && (this.itemNo = json.itemNo);
    _hasOwnProperty.call(json, "application") && (this.application = json.application);
    _hasOwnProperty.call(json, "serverName") && (this.serverName = json.serverName);
    _hasOwnProperty.call(json, "nodeName") && (this.nodeName = json.nodeName);
    _hasOwnProperty.call(json, "setName") && (this.setName = json.setName);
    _hasOwnProperty.call(json, "command") && (this.command = json.command);
    _hasOwnProperty.call(json, "userName") && (this.userName = json.userName);
    _hasOwnProperty.call(json, "parameters") && (this.parameters.readFromObject(json.parameters));
    return this;
};
tars.TaskItemReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.TaskItemReq.new = function () {
    return new tars.TaskItemReq();
};
tars.TaskItemReq.create = function (is) {
    return tars.TaskItemReq._readFrom(is);
};

tars.TaskItemRsp = function() {
    this.req = new tars.TaskItemReq;
    this.startTime = "";
    this.endTime = "";
    this.status = tars.EMTaskItemStatus.EM_I_NOT_START;
    this.statusInfo = "";
    this.executeLog = "";
    this.percent = 0;
    this._classname = "tars.TaskItemRsp";
};
tars.TaskItemRsp._classname = "tars.TaskItemRsp";
tars.TaskItemRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.TaskItemRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.TaskItemRsp._readFrom = function (is) {
    var tmp = new tars.TaskItemRsp;
    tmp.req = is.readStruct(0, false, tars.TaskItemReq);
    tmp.startTime = is.readString(1, false, "");
    tmp.endTime = is.readString(2, false, "");
    tmp.status = is.readInt32(3, false, tars.EMTaskItemStatus.EM_I_NOT_START);
    tmp.statusInfo = is.readString(4, false, "");
    tmp.executeLog = is.readString(5, false, "");
    tmp.percent = is.readInt32(6, false, 0);
    return tmp;
};
tars.TaskItemRsp.prototype._writeTo = function (os) {
    os.writeStruct(0, this.req);
    os.writeString(1, this.startTime);
    os.writeString(2, this.endTime);
    os.writeInt32(3, this.status);
    os.writeString(4, this.statusInfo);
    os.writeString(5, this.executeLog);
    os.writeInt32(6, this.percent);
};
tars.TaskItemRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.TaskItemRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.TaskItemRsp.prototype.toObject = function() { 
    return {
        "req" : this.req.toObject(),
        "startTime" : this.startTime,
        "endTime" : this.endTime,
        "status" : this.status,
        "statusInfo" : this.statusInfo,
        "executeLog" : this.executeLog,
        "percent" : this.percent
    };
};
tars.TaskItemRsp.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "req") && (this.req.readFromObject(json.req));
    _hasOwnProperty.call(json, "startTime") && (this.startTime = json.startTime);
    _hasOwnProperty.call(json, "endTime") && (this.endTime = json.endTime);
    _hasOwnProperty.call(json, "status") && (this.status = json.status);
    _hasOwnProperty.call(json, "statusInfo") && (this.statusInfo = json.statusInfo);
    _hasOwnProperty.call(json, "executeLog") && (this.executeLog = json.executeLog);
    _hasOwnProperty.call(json, "percent") && (this.percent = json.percent);
    return this;
};
tars.TaskItemRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.TaskItemRsp.new = function () {
    return new tars.TaskItemRsp();
};
tars.TaskItemRsp.create = function (is) {
    return tars.TaskItemRsp._readFrom(is);
};

tars.TaskReq = function() {
    this.taskItemReq = new TarsStream.List(tars.TaskItemReq);
    this.taskNo = "";
    this.serial = true;
    this.userName = "";
    this._classname = "tars.TaskReq";
};
tars.TaskReq._classname = "tars.TaskReq";
tars.TaskReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.TaskReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.TaskReq._readFrom = function (is) {
    var tmp = new tars.TaskReq;
    tmp.taskItemReq = is.readList(0, false, TarsStream.List(tars.TaskItemReq));
    tmp.taskNo = is.readString(1, false, "");
    tmp.serial = is.readBoolean(2, false, true);
    tmp.userName = is.readString(3, false, "");
    return tmp;
};
tars.TaskReq.prototype._writeTo = function (os) {
    os.writeList(0, this.taskItemReq);
    os.writeString(1, this.taskNo);
    os.writeBoolean(2, this.serial);
    os.writeString(3, this.userName);
};
tars.TaskReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.TaskReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.TaskReq.prototype.toObject = function() { 
    return {
        "taskItemReq" : this.taskItemReq.toObject(),
        "taskNo" : this.taskNo,
        "serial" : this.serial,
        "userName" : this.userName
    };
};
tars.TaskReq.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "taskItemReq") && (this.taskItemReq.readFromObject(json.taskItemReq));
    _hasOwnProperty.call(json, "taskNo") && (this.taskNo = json.taskNo);
    _hasOwnProperty.call(json, "serial") && (this.serial = json.serial);
    _hasOwnProperty.call(json, "userName") && (this.userName = json.userName);
    return this;
};
tars.TaskReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.TaskReq.new = function () {
    return new tars.TaskReq();
};
tars.TaskReq.create = function (is) {
    return tars.TaskReq._readFrom(is);
};

tars.TaskRsp = function() {
    this.taskItemRsp = new TarsStream.List(tars.TaskItemRsp);
    this.taskNo = "";
    this.serial = true;
    this.userName = "";
    this.status = tars.EMTaskStatus.EM_T_NOT_START;
    this.createTime = "";
    this._classname = "tars.TaskRsp";
};
tars.TaskRsp._classname = "tars.TaskRsp";
tars.TaskRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.TaskRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.TaskRsp._readFrom = function (is) {
    var tmp = new tars.TaskRsp;
    tmp.taskItemRsp = is.readList(0, false, TarsStream.List(tars.TaskItemRsp));
    tmp.taskNo = is.readString(1, false, "");
    tmp.serial = is.readBoolean(2, false, true);
    tmp.userName = is.readString(3, false, "");
    tmp.status = is.readInt32(4, false, tars.EMTaskStatus.EM_T_NOT_START);
    tmp.createTime = is.readString(5, false, "");
    return tmp;
};
tars.TaskRsp.prototype._writeTo = function (os) {
    os.writeList(0, this.taskItemRsp);
    os.writeString(1, this.taskNo);
    os.writeBoolean(2, this.serial);
    os.writeString(3, this.userName);
    os.writeInt32(4, this.status);
    os.writeString(5, this.createTime);
};
tars.TaskRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.TaskRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.TaskRsp.prototype.toObject = function() { 
    return {
        "taskItemRsp" : this.taskItemRsp.toObject(),
        "taskNo" : this.taskNo,
        "serial" : this.serial,
        "userName" : this.userName,
        "status" : this.status,
        "createTime" : this.createTime
    };
};
tars.TaskRsp.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "taskItemRsp") && (this.taskItemRsp.readFromObject(json.taskItemRsp));
    _hasOwnProperty.call(json, "taskNo") && (this.taskNo = json.taskNo);
    _hasOwnProperty.call(json, "serial") && (this.serial = json.serial);
    _hasOwnProperty.call(json, "userName") && (this.userName = json.userName);
    _hasOwnProperty.call(json, "status") && (this.status = json.status);
    _hasOwnProperty.call(json, "createTime") && (this.createTime = json.createTime);
    return this;
};
tars.TaskRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.TaskRsp.new = function () {
    return new tars.TaskRsp();
};
tars.TaskRsp.create = function (is) {
    return tars.TaskRsp._readFrom(is);
};

tars.FrameworkServer = function() {
    this.serverName = "";
    this.nodeName = "";
    this.objName = "";
    this._classname = "tars.FrameworkServer";
};
tars.FrameworkServer._classname = "tars.FrameworkServer";
tars.FrameworkServer._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.FrameworkServer._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.FrameworkServer._readFrom = function (is) {
    var tmp = new tars.FrameworkServer;
    tmp.serverName = is.readString(0, true, "");
    tmp.nodeName = is.readString(1, true, "");
    tmp.objName = is.readString(2, true, "");
    return tmp;
};
tars.FrameworkServer.prototype._writeTo = function (os) {
    os.writeString(0, this.serverName);
    os.writeString(1, this.nodeName);
    os.writeString(2, this.objName);
};
tars.FrameworkServer.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.FrameworkServer.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.FrameworkServer.prototype.toObject = function() { 
    return {
        "serverName" : this.serverName,
        "nodeName" : this.nodeName,
        "objName" : this.objName
    };
};
tars.FrameworkServer.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "serverName") && (this.serverName = json.serverName);
    _hasOwnProperty.call(json, "nodeName") && (this.nodeName = json.nodeName);
    _hasOwnProperty.call(json, "objName") && (this.objName = json.objName);
    return this;
};
tars.FrameworkServer.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.FrameworkServer.new = function () {
    return new tars.FrameworkServer();
};
tars.FrameworkServer.create = function (is) {
    return tars.FrameworkServer._readFrom(is);
};

var __tars_AdminReg$addTaskReq$IF = {
    "name" : "addTaskReq",
    "return" : "int32",
    "arguments" : [{
        "name" : "taskReq",
        "class" : "tars.TaskReq",
        "direction" : "in"
    }]
};

var __tars_AdminReg$addTaskReq$IE = function (taskReq) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, taskReq);
    return os.getBinBuffer();
};

var __tars_AdminReg$addTaskReq$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$addTaskReq$PE = function (taskReq, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("taskReq", taskReq);
    return tup;
};

var __tars_AdminReg$addTaskReq$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$addTaskReq$ER = function (data) {
    throw _makeError(data, "Call AdminReg::addTaskReq failed");
};

tars.AdminRegProxy.prototype.addTaskReq = function (taskReq) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("addTaskReq", __tars_AdminReg$addTaskReq$PE(taskReq, version), arguments[arguments.length - 1], __tars_AdminReg$addTaskReq$IF).then(__tars_AdminReg$addTaskReq$PD, __tars_AdminReg$addTaskReq$ER);
    } else {
        return this._worker.tars_invoke("addTaskReq", __tars_AdminReg$addTaskReq$IE(taskReq), arguments[arguments.length - 1], __tars_AdminReg$addTaskReq$IF).then(__tars_AdminReg$addTaskReq$ID, __tars_AdminReg$addTaskReq$ER);
    }
};
tars.AdminRegProxy.addTaskReq = __tars_AdminReg$addTaskReq$IF;

var __tars_AdminReg$batchPatch$IF = {
    "name" : "batchPatch",
    "return" : "int32",
    "arguments" : [{
        "name" : "req",
        "class" : "tars.PatchRequest",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$batchPatch$IE = function (req) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, req);
    return os.getBinBuffer();
};

var __tars_AdminReg$batchPatch$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(2, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$batchPatch$PE = function (req, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("req", req);
    return tup;
};

var __tars_AdminReg$batchPatch$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$batchPatch$ER = function (data) {
    throw _makeError(data, "Call AdminReg::batchPatch failed");
};

tars.AdminRegProxy.prototype.batchPatch = function (req) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("batchPatch", __tars_AdminReg$batchPatch$PE(req, version), arguments[arguments.length - 1], __tars_AdminReg$batchPatch$IF).then(__tars_AdminReg$batchPatch$PD, __tars_AdminReg$batchPatch$ER);
    } else {
        return this._worker.tars_invoke("batchPatch", __tars_AdminReg$batchPatch$IE(req), arguments[arguments.length - 1], __tars_AdminReg$batchPatch$IF).then(__tars_AdminReg$batchPatch$ID, __tars_AdminReg$batchPatch$ER);
    }
};
tars.AdminRegProxy.batchPatch = __tars_AdminReg$batchPatch$IF;

var __tars_AdminReg$checkServer$IF = {
    "name" : "checkServer",
    "return" : "int32",
    "arguments" : [{
        "name" : "server",
        "class" : "tars.FrameworkServer",
        "direction" : "in"
    }]
};

var __tars_AdminReg$checkServer$IE = function (server) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, server);
    return os.getBinBuffer();
};

var __tars_AdminReg$checkServer$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$checkServer$PE = function (server, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("server", server);
    return tup;
};

var __tars_AdminReg$checkServer$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$checkServer$ER = function (data) {
    throw _makeError(data, "Call AdminReg::checkServer failed");
};

tars.AdminRegProxy.prototype.checkServer = function (server) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("checkServer", __tars_AdminReg$checkServer$PE(server, version), arguments[arguments.length - 1], __tars_AdminReg$checkServer$IF).then(__tars_AdminReg$checkServer$PD, __tars_AdminReg$checkServer$ER);
    } else {
        return this._worker.tars_invoke("checkServer", __tars_AdminReg$checkServer$IE(server), arguments[arguments.length - 1], __tars_AdminReg$checkServer$IF).then(__tars_AdminReg$checkServer$ID, __tars_AdminReg$checkServer$ER);
    }
};
tars.AdminRegProxy.checkServer = __tars_AdminReg$checkServer$IF;

var __tars_AdminReg$deletePatchFile$IF = {
    "name" : "deletePatchFile",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "patchFile",
        "class" : "string",
        "direction" : "in"
    }]
};

var __tars_AdminReg$deletePatchFile$IE = function (application, serverName, patchFile) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, patchFile);
    return os.getBinBuffer();
};

var __tars_AdminReg$deletePatchFile$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$deletePatchFile$PE = function (application, serverName, patchFile, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("patchFile", patchFile);
    return tup;
};

var __tars_AdminReg$deletePatchFile$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$deletePatchFile$ER = function (data) {
    throw _makeError(data, "Call AdminReg::deletePatchFile failed");
};

tars.AdminRegProxy.prototype.deletePatchFile = function (application, serverName, patchFile) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("deletePatchFile", __tars_AdminReg$deletePatchFile$PE(application, serverName, patchFile, version), arguments[arguments.length - 1], __tars_AdminReg$deletePatchFile$IF).then(__tars_AdminReg$deletePatchFile$PD, __tars_AdminReg$deletePatchFile$ER);
    } else {
        return this._worker.tars_invoke("deletePatchFile", __tars_AdminReg$deletePatchFile$IE(application, serverName, patchFile), arguments[arguments.length - 1], __tars_AdminReg$deletePatchFile$IF).then(__tars_AdminReg$deletePatchFile$ID, __tars_AdminReg$deletePatchFile$ER);
    }
};
tars.AdminRegProxy.deletePatchFile = __tars_AdminReg$deletePatchFile$IF;

var __tars_AdminReg$getAllApplicationNames$IF = {
    "name" : "getAllApplicationNames",
    "return" : "list(string)",
    "arguments" : [{
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getAllApplicationNames$IE = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __tars_AdminReg$getAllApplicationNames$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readList(0, true, TarsStream.List(TarsStream.String)),
                "arguments" : {
                    "result" : is.readString(1, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getAllApplicationNames$PE = function (__$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    return tup;
};

var __tars_AdminReg$getAllApplicationNames$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readList("", TarsStream.List(TarsStream.String), new TarsStream.List(TarsStream.String)),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getAllApplicationNames$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getAllApplicationNames failed");
};

tars.AdminRegProxy.prototype.getAllApplicationNames = function () {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getAllApplicationNames", __tars_AdminReg$getAllApplicationNames$PE(version), arguments[arguments.length - 1], __tars_AdminReg$getAllApplicationNames$IF).then(__tars_AdminReg$getAllApplicationNames$PD, __tars_AdminReg$getAllApplicationNames$ER);
    } else {
        return this._worker.tars_invoke("getAllApplicationNames", __tars_AdminReg$getAllApplicationNames$IE(), arguments[arguments.length - 1], __tars_AdminReg$getAllApplicationNames$IF).then(__tars_AdminReg$getAllApplicationNames$ID, __tars_AdminReg$getAllApplicationNames$ER);
    }
};
tars.AdminRegProxy.getAllApplicationNames = __tars_AdminReg$getAllApplicationNames$IF;

var __tars_AdminReg$getAllNodeNames$IF = {
    "name" : "getAllNodeNames",
    "return" : "list(string)",
    "arguments" : [{
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getAllNodeNames$IE = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __tars_AdminReg$getAllNodeNames$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readList(0, true, TarsStream.List(TarsStream.String)),
                "arguments" : {
                    "result" : is.readString(1, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getAllNodeNames$PE = function (__$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    return tup;
};

var __tars_AdminReg$getAllNodeNames$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readList("", TarsStream.List(TarsStream.String), new TarsStream.List(TarsStream.String)),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getAllNodeNames$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getAllNodeNames failed");
};

tars.AdminRegProxy.prototype.getAllNodeNames = function () {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getAllNodeNames", __tars_AdminReg$getAllNodeNames$PE(version), arguments[arguments.length - 1], __tars_AdminReg$getAllNodeNames$IF).then(__tars_AdminReg$getAllNodeNames$PD, __tars_AdminReg$getAllNodeNames$ER);
    } else {
        return this._worker.tars_invoke("getAllNodeNames", __tars_AdminReg$getAllNodeNames$IE(), arguments[arguments.length - 1], __tars_AdminReg$getAllNodeNames$IF).then(__tars_AdminReg$getAllNodeNames$ID, __tars_AdminReg$getAllNodeNames$ER);
    }
};
tars.AdminRegProxy.getAllNodeNames = __tars_AdminReg$getAllNodeNames$IF;

var __tars_AdminReg$getAllServerIds$IF = {
    "name" : "getAllServerIds",
    "return" : "list(list(string))",
    "arguments" : [{
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getAllServerIds$IE = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __tars_AdminReg$getAllServerIds$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readList(0, true, TarsStream.List(TarsStream.List(TarsStream.String))),
                "arguments" : {
                    "result" : is.readString(1, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getAllServerIds$PE = function (__$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    return tup;
};

var __tars_AdminReg$getAllServerIds$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readList("", TarsStream.List(TarsStream.List(TarsStream.String)), new TarsStream.List(TarsStream.List(TarsStream.String))),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getAllServerIds$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getAllServerIds failed");
};

tars.AdminRegProxy.prototype.getAllServerIds = function () {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getAllServerIds", __tars_AdminReg$getAllServerIds$PE(version), arguments[arguments.length - 1], __tars_AdminReg$getAllServerIds$IF).then(__tars_AdminReg$getAllServerIds$PD, __tars_AdminReg$getAllServerIds$ER);
    } else {
        return this._worker.tars_invoke("getAllServerIds", __tars_AdminReg$getAllServerIds$IE(), arguments[arguments.length - 1], __tars_AdminReg$getAllServerIds$IF).then(__tars_AdminReg$getAllServerIds$ID, __tars_AdminReg$getAllServerIds$ER);
    }
};
tars.AdminRegProxy.getAllServerIds = __tars_AdminReg$getAllServerIds$IF;

var __tars_AdminReg$getClientIp$IF = {
    "name" : "getClientIp",
    "return" : "int32",
    "arguments" : [{
        "name" : "sClientIp",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getClientIp$IE = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __tars_AdminReg$getClientIp$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "sClientIp" : is.readString(1, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getClientIp$PE = function (__$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    return tup;
};

var __tars_AdminReg$getClientIp$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "sClientIp" : tup.readString("sClientIp")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getClientIp$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getClientIp failed");
};

tars.AdminRegProxy.prototype.getClientIp = function () {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getClientIp", __tars_AdminReg$getClientIp$PE(version), arguments[arguments.length - 1], __tars_AdminReg$getClientIp$IF).then(__tars_AdminReg$getClientIp$PD, __tars_AdminReg$getClientIp$ER);
    } else {
        return this._worker.tars_invoke("getClientIp", __tars_AdminReg$getClientIp$IE(), arguments[arguments.length - 1], __tars_AdminReg$getClientIp$IF).then(__tars_AdminReg$getClientIp$ID, __tars_AdminReg$getClientIp$ER);
    }
};
tars.AdminRegProxy.getClientIp = __tars_AdminReg$getClientIp$IF;

var __tars_AdminReg$getGroupId$IF = {
    "name" : "getGroupId",
    "return" : "int32",
    "arguments" : [{
        "name" : "ip",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "groupId",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getGroupId$IE = function (ip) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, ip);
    return os.getBinBuffer();
};

var __tars_AdminReg$getGroupId$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "groupId" : is.readInt32(2, true, 0),
                    "result" : is.readString(3, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getGroupId$PE = function (ip, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("ip", ip);
    return tup;
};

var __tars_AdminReg$getGroupId$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "groupId" : tup.readInt32("groupId"),
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getGroupId$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getGroupId failed");
};

tars.AdminRegProxy.prototype.getGroupId = function (ip) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getGroupId", __tars_AdminReg$getGroupId$PE(ip, version), arguments[arguments.length - 1], __tars_AdminReg$getGroupId$IF).then(__tars_AdminReg$getGroupId$PD, __tars_AdminReg$getGroupId$ER);
    } else {
        return this._worker.tars_invoke("getGroupId", __tars_AdminReg$getGroupId$IE(ip), arguments[arguments.length - 1], __tars_AdminReg$getGroupId$IF).then(__tars_AdminReg$getGroupId$ID, __tars_AdminReg$getGroupId$ER);
    }
};
tars.AdminRegProxy.getGroupId = __tars_AdminReg$getGroupId$IF;

var __tars_AdminReg$getLogData$IF = {
    "name" : "getLogData",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nodeName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "logFile",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "cmd",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "fileData",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getLogData$IE = function (application, serverName, nodeName, logFile, cmd) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, nodeName);
    os.writeString(4, logFile);
    os.writeString(5, cmd);
    return os.getBinBuffer();
};

var __tars_AdminReg$getLogData$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "fileData" : is.readString(6, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getLogData$PE = function (application, serverName, nodeName, logFile, cmd, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("nodeName", nodeName);
    tup.writeString("logFile", logFile);
    tup.writeString("cmd", cmd);
    return tup;
};

var __tars_AdminReg$getLogData$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "fileData" : tup.readString("fileData")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getLogData$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getLogData failed");
};

tars.AdminRegProxy.prototype.getLogData = function (application, serverName, nodeName, logFile, cmd) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getLogData", __tars_AdminReg$getLogData$PE(application, serverName, nodeName, logFile, cmd, version), arguments[arguments.length - 1], __tars_AdminReg$getLogData$IF).then(__tars_AdminReg$getLogData$PD, __tars_AdminReg$getLogData$ER);
    } else {
        return this._worker.tars_invoke("getLogData", __tars_AdminReg$getLogData$IE(application, serverName, nodeName, logFile, cmd), arguments[arguments.length - 1], __tars_AdminReg$getLogData$IF).then(__tars_AdminReg$getLogData$ID, __tars_AdminReg$getLogData$ER);
    }
};
tars.AdminRegProxy.getLogData = __tars_AdminReg$getLogData$IF;

var __tars_AdminReg$getLogFileList$IF = {
    "name" : "getLogFileList",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nodeName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "logFileList",
        "class" : "list(string)",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getLogFileList$IE = function (application, serverName, nodeName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, nodeName);
    return os.getBinBuffer();
};

var __tars_AdminReg$getLogFileList$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "logFileList" : is.readList(4, true, TarsStream.List(TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getLogFileList$PE = function (application, serverName, nodeName, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("nodeName", nodeName);
    return tup;
};

var __tars_AdminReg$getLogFileList$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "logFileList" : tup.readList("logFileList", TarsStream.List(TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getLogFileList$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getLogFileList failed");
};

tars.AdminRegProxy.prototype.getLogFileList = function (application, serverName, nodeName) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getLogFileList", __tars_AdminReg$getLogFileList$PE(application, serverName, nodeName, version), arguments[arguments.length - 1], __tars_AdminReg$getLogFileList$IF).then(__tars_AdminReg$getLogFileList$PD, __tars_AdminReg$getLogFileList$ER);
    } else {
        return this._worker.tars_invoke("getLogFileList", __tars_AdminReg$getLogFileList$IE(application, serverName, nodeName), arguments[arguments.length - 1], __tars_AdminReg$getLogFileList$IF).then(__tars_AdminReg$getLogFileList$ID, __tars_AdminReg$getLogFileList$ER);
    }
};
tars.AdminRegProxy.getLogFileList = __tars_AdminReg$getLogFileList$IF;

var __tars_AdminReg$getNodeVesion$IF = {
    "name" : "getNodeVesion",
    "return" : "int32",
    "arguments" : [{
        "name" : "name",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "version",
        "class" : "string",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getNodeVesion$IE = function (name) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, name);
    return os.getBinBuffer();
};

var __tars_AdminReg$getNodeVesion$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "version" : is.readString(2, true, ""),
                    "result" : is.readString(3, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getNodeVesion$PE = function (name, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("name", name);
    return tup;
};

var __tars_AdminReg$getNodeVesion$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "version" : tup.readString("version"),
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getNodeVesion$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getNodeVesion failed");
};

tars.AdminRegProxy.prototype.getNodeVesion = function (name) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getNodeVesion", __tars_AdminReg$getNodeVesion$PE(name, version), arguments[arguments.length - 1], __tars_AdminReg$getNodeVesion$IF).then(__tars_AdminReg$getNodeVesion$PD, __tars_AdminReg$getNodeVesion$ER);
    } else {
        return this._worker.tars_invoke("getNodeVesion", __tars_AdminReg$getNodeVesion$IE(name), arguments[arguments.length - 1], __tars_AdminReg$getNodeVesion$IF).then(__tars_AdminReg$getNodeVesion$ID, __tars_AdminReg$getNodeVesion$ER);
    }
};
tars.AdminRegProxy.getNodeVesion = __tars_AdminReg$getNodeVesion$IF;

var __tars_AdminReg$getPatchPercent$IF = {
    "name" : "getPatchPercent",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nodeName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "tPatchInfo",
        "class" : "tars.PatchInfo",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getPatchPercent$IE = function (application, serverName, nodeName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, nodeName);
    return os.getBinBuffer();
};

var __tars_AdminReg$getPatchPercent$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "tPatchInfo" : is.readStruct(4, true, _TARS_MODULE_A_.tars.PatchInfo)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getPatchPercent$PE = function (application, serverName, nodeName, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("nodeName", nodeName);
    return tup;
};

var __tars_AdminReg$getPatchPercent$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "tPatchInfo" : tup.readStruct("tPatchInfo", _TARS_MODULE_A_.tars.PatchInfo)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getPatchPercent$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getPatchPercent failed");
};

tars.AdminRegProxy.prototype.getPatchPercent = function (application, serverName, nodeName) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getPatchPercent", __tars_AdminReg$getPatchPercent$PE(application, serverName, nodeName, version), arguments[arguments.length - 1], __tars_AdminReg$getPatchPercent$IF).then(__tars_AdminReg$getPatchPercent$PD, __tars_AdminReg$getPatchPercent$ER);
    } else {
        return this._worker.tars_invoke("getPatchPercent", __tars_AdminReg$getPatchPercent$IE(application, serverName, nodeName), arguments[arguments.length - 1], __tars_AdminReg$getPatchPercent$IF).then(__tars_AdminReg$getPatchPercent$ID, __tars_AdminReg$getPatchPercent$ER);
    }
};
tars.AdminRegProxy.getPatchPercent = __tars_AdminReg$getPatchPercent$IF;

var __tars_AdminReg$getProfileTemplate$IF = {
    "name" : "getProfileTemplate",
    "return" : "int32",
    "arguments" : [{
        "name" : "profileName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "profileTemplate",
        "class" : "string",
        "direction" : "out"
    }, {
        "name" : "resultDesc",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getProfileTemplate$IE = function (profileName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, profileName);
    return os.getBinBuffer();
};

var __tars_AdminReg$getProfileTemplate$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "profileTemplate" : is.readString(2, true, ""),
                    "resultDesc" : is.readString(3, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getProfileTemplate$PE = function (profileName, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("profileName", profileName);
    return tup;
};

var __tars_AdminReg$getProfileTemplate$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "profileTemplate" : tup.readString("profileTemplate"),
                    "resultDesc" : tup.readString("resultDesc")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getProfileTemplate$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getProfileTemplate failed");
};

tars.AdminRegProxy.prototype.getProfileTemplate = function (profileName) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getProfileTemplate", __tars_AdminReg$getProfileTemplate$PE(profileName, version), arguments[arguments.length - 1], __tars_AdminReg$getProfileTemplate$IF).then(__tars_AdminReg$getProfileTemplate$PD, __tars_AdminReg$getProfileTemplate$ER);
    } else {
        return this._worker.tars_invoke("getProfileTemplate", __tars_AdminReg$getProfileTemplate$IE(profileName), arguments[arguments.length - 1], __tars_AdminReg$getProfileTemplate$IF).then(__tars_AdminReg$getProfileTemplate$ID, __tars_AdminReg$getProfileTemplate$ER);
    }
};
tars.AdminRegProxy.getProfileTemplate = __tars_AdminReg$getProfileTemplate$IF;

var __tars_AdminReg$getServerProfileTemplate$IF = {
    "name" : "getServerProfileTemplate",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nodeName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "profileTemplate",
        "class" : "string",
        "direction" : "out"
    }, {
        "name" : "resultDesc",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getServerProfileTemplate$IE = function (application, serverName, nodeName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, nodeName);
    return os.getBinBuffer();
};

var __tars_AdminReg$getServerProfileTemplate$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "profileTemplate" : is.readString(4, true, ""),
                    "resultDesc" : is.readString(5, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getServerProfileTemplate$PE = function (application, serverName, nodeName, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("nodeName", nodeName);
    return tup;
};

var __tars_AdminReg$getServerProfileTemplate$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "profileTemplate" : tup.readString("profileTemplate"),
                    "resultDesc" : tup.readString("resultDesc")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getServerProfileTemplate$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getServerProfileTemplate failed");
};

tars.AdminRegProxy.prototype.getServerProfileTemplate = function (application, serverName, nodeName) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getServerProfileTemplate", __tars_AdminReg$getServerProfileTemplate$PE(application, serverName, nodeName, version), arguments[arguments.length - 1], __tars_AdminReg$getServerProfileTemplate$IF).then(__tars_AdminReg$getServerProfileTemplate$PD, __tars_AdminReg$getServerProfileTemplate$ER);
    } else {
        return this._worker.tars_invoke("getServerProfileTemplate", __tars_AdminReg$getServerProfileTemplate$IE(application, serverName, nodeName), arguments[arguments.length - 1], __tars_AdminReg$getServerProfileTemplate$IF).then(__tars_AdminReg$getServerProfileTemplate$ID, __tars_AdminReg$getServerProfileTemplate$ER);
    }
};
tars.AdminRegProxy.getServerProfileTemplate = __tars_AdminReg$getServerProfileTemplate$IF;

var __tars_AdminReg$getServerState$IF = {
    "name" : "getServerState",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nodeName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "state",
        "class" : "tars.ServerStateDesc",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getServerState$IE = function (application, serverName, nodeName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, nodeName);
    return os.getBinBuffer();
};

var __tars_AdminReg$getServerState$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "state" : is.readStruct(4, true, tars.ServerStateDesc),
                    "result" : is.readString(5, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getServerState$PE = function (application, serverName, nodeName, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("nodeName", nodeName);
    return tup;
};

var __tars_AdminReg$getServerState$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "state" : tup.readStruct("state", tars.ServerStateDesc),
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getServerState$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getServerState failed");
};

tars.AdminRegProxy.prototype.getServerState = function (application, serverName, nodeName) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getServerState", __tars_AdminReg$getServerState$PE(application, serverName, nodeName, version), arguments[arguments.length - 1], __tars_AdminReg$getServerState$IF).then(__tars_AdminReg$getServerState$PD, __tars_AdminReg$getServerState$ER);
    } else {
        return this._worker.tars_invoke("getServerState", __tars_AdminReg$getServerState$IE(application, serverName, nodeName), arguments[arguments.length - 1], __tars_AdminReg$getServerState$IF).then(__tars_AdminReg$getServerState$ID, __tars_AdminReg$getServerState$ER);
    }
};
tars.AdminRegProxy.getServerState = __tars_AdminReg$getServerState$IF;

var __tars_AdminReg$getServers$IF = {
    "name" : "getServers",
    "return" : "int32",
    "arguments" : [{
        "name" : "servers",
        "class" : "list(tars.FrameworkServer)",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getServers$IE = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __tars_AdminReg$getServers$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "servers" : is.readList(1, true, TarsStream.List(tars.FrameworkServer))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getServers$PE = function (__$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    return tup;
};

var __tars_AdminReg$getServers$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "servers" : tup.readList("servers", TarsStream.List(tars.FrameworkServer))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getServers$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getServers failed");
};

tars.AdminRegProxy.prototype.getServers = function () {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getServers", __tars_AdminReg$getServers$PE(version), arguments[arguments.length - 1], __tars_AdminReg$getServers$IF).then(__tars_AdminReg$getServers$PD, __tars_AdminReg$getServers$ER);
    } else {
        return this._worker.tars_invoke("getServers", __tars_AdminReg$getServers$IE(), arguments[arguments.length - 1], __tars_AdminReg$getServers$IF).then(__tars_AdminReg$getServers$ID, __tars_AdminReg$getServers$ER);
    }
};
tars.AdminRegProxy.getServers = __tars_AdminReg$getServers$IF;

var __tars_AdminReg$getTaskHistory$IF = {
    "name" : "getTaskHistory",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "command",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "taskRsps",
        "class" : "list(tars.TaskRsp)",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getTaskHistory$IE = function (application, serverName, command) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, command);
    return os.getBinBuffer();
};

var __tars_AdminReg$getTaskHistory$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "taskRsps" : is.readList(4, true, TarsStream.List(tars.TaskRsp))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getTaskHistory$PE = function (application, serverName, command, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("command", command);
    return tup;
};

var __tars_AdminReg$getTaskHistory$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "taskRsps" : tup.readList("taskRsps", TarsStream.List(tars.TaskRsp))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getTaskHistory$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getTaskHistory failed");
};

tars.AdminRegProxy.prototype.getTaskHistory = function (application, serverName, command) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getTaskHistory", __tars_AdminReg$getTaskHistory$PE(application, serverName, command, version), arguments[arguments.length - 1], __tars_AdminReg$getTaskHistory$IF).then(__tars_AdminReg$getTaskHistory$PD, __tars_AdminReg$getTaskHistory$ER);
    } else {
        return this._worker.tars_invoke("getTaskHistory", __tars_AdminReg$getTaskHistory$IE(application, serverName, command), arguments[arguments.length - 1], __tars_AdminReg$getTaskHistory$IF).then(__tars_AdminReg$getTaskHistory$ID, __tars_AdminReg$getTaskHistory$ER);
    }
};
tars.AdminRegProxy.getTaskHistory = __tars_AdminReg$getTaskHistory$IF;

var __tars_AdminReg$getTaskRsp$IF = {
    "name" : "getTaskRsp",
    "return" : "int32",
    "arguments" : [{
        "name" : "taskNo",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "taskRsp",
        "class" : "tars.TaskRsp",
        "direction" : "out"
    }]
};

var __tars_AdminReg$getTaskRsp$IE = function (taskNo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, taskNo);
    return os.getBinBuffer();
};

var __tars_AdminReg$getTaskRsp$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "taskRsp" : is.readStruct(2, true, tars.TaskRsp)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getTaskRsp$PE = function (taskNo, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("taskNo", taskNo);
    return tup;
};

var __tars_AdminReg$getTaskRsp$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "taskRsp" : tup.readStruct("taskRsp", tars.TaskRsp)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$getTaskRsp$ER = function (data) {
    throw _makeError(data, "Call AdminReg::getTaskRsp failed");
};

tars.AdminRegProxy.prototype.getTaskRsp = function (taskNo) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getTaskRsp", __tars_AdminReg$getTaskRsp$PE(taskNo, version), arguments[arguments.length - 1], __tars_AdminReg$getTaskRsp$IF).then(__tars_AdminReg$getTaskRsp$PD, __tars_AdminReg$getTaskRsp$ER);
    } else {
        return this._worker.tars_invoke("getTaskRsp", __tars_AdminReg$getTaskRsp$IE(taskNo), arguments[arguments.length - 1], __tars_AdminReg$getTaskRsp$IF).then(__tars_AdminReg$getTaskRsp$ID, __tars_AdminReg$getTaskRsp$ER);
    }
};
tars.AdminRegProxy.getTaskRsp = __tars_AdminReg$getTaskRsp$IF;

var __tars_AdminReg$loadServer$IF = {
    "name" : "loadServer",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nodeName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$loadServer$IE = function (application, serverName, nodeName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, nodeName);
    return os.getBinBuffer();
};

var __tars_AdminReg$loadServer$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(4, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$loadServer$PE = function (application, serverName, nodeName, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("nodeName", nodeName);
    return tup;
};

var __tars_AdminReg$loadServer$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$loadServer$ER = function (data) {
    throw _makeError(data, "Call AdminReg::loadServer failed");
};

tars.AdminRegProxy.prototype.loadServer = function (application, serverName, nodeName) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("loadServer", __tars_AdminReg$loadServer$PE(application, serverName, nodeName, version), arguments[arguments.length - 1], __tars_AdminReg$loadServer$IF).then(__tars_AdminReg$loadServer$PD, __tars_AdminReg$loadServer$ER);
    } else {
        return this._worker.tars_invoke("loadServer", __tars_AdminReg$loadServer$IE(application, serverName, nodeName), arguments[arguments.length - 1], __tars_AdminReg$loadServer$IF).then(__tars_AdminReg$loadServer$ID, __tars_AdminReg$loadServer$ER);
    }
};
tars.AdminRegProxy.loadServer = __tars_AdminReg$loadServer$IF;

var __tars_AdminReg$notifyServer$IF = {
    "name" : "notifyServer",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nodeName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "command",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$notifyServer$IE = function (application, serverName, nodeName, command) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, nodeName);
    os.writeString(4, command);
    return os.getBinBuffer();
};

var __tars_AdminReg$notifyServer$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(5, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$notifyServer$PE = function (application, serverName, nodeName, command, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("nodeName", nodeName);
    tup.writeString("command", command);
    return tup;
};

var __tars_AdminReg$notifyServer$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$notifyServer$ER = function (data) {
    throw _makeError(data, "Call AdminReg::notifyServer failed");
};

tars.AdminRegProxy.prototype.notifyServer = function (application, serverName, nodeName, command) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("notifyServer", __tars_AdminReg$notifyServer$PE(application, serverName, nodeName, command, version), arguments[arguments.length - 1], __tars_AdminReg$notifyServer$IF).then(__tars_AdminReg$notifyServer$PD, __tars_AdminReg$notifyServer$ER);
    } else {
        return this._worker.tars_invoke("notifyServer", __tars_AdminReg$notifyServer$IE(application, serverName, nodeName, command), arguments[arguments.length - 1], __tars_AdminReg$notifyServer$IF).then(__tars_AdminReg$notifyServer$ID, __tars_AdminReg$notifyServer$ER);
    }
};
tars.AdminRegProxy.notifyServer = __tars_AdminReg$notifyServer$IF;

var __tars_AdminReg$pingNode$IF = {
    "name" : "pingNode",
    "return" : "bool",
    "arguments" : [{
        "name" : "name",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$pingNode$IE = function (name) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, name);
    return os.getBinBuffer();
};

var __tars_AdminReg$pingNode$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readBoolean(0, true, true),
                "arguments" : {
                    "result" : is.readString(2, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$pingNode$PE = function (name, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("name", name);
    return tup;
};

var __tars_AdminReg$pingNode$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readBoolean("", false),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$pingNode$ER = function (data) {
    throw _makeError(data, "Call AdminReg::pingNode failed");
};

tars.AdminRegProxy.prototype.pingNode = function (name) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("pingNode", __tars_AdminReg$pingNode$PE(name, version), arguments[arguments.length - 1], __tars_AdminReg$pingNode$IF).then(__tars_AdminReg$pingNode$PD, __tars_AdminReg$pingNode$ER);
    } else {
        return this._worker.tars_invoke("pingNode", __tars_AdminReg$pingNode$IE(name), arguments[arguments.length - 1], __tars_AdminReg$pingNode$IF).then(__tars_AdminReg$pingNode$ID, __tars_AdminReg$pingNode$ER);
    }
};
tars.AdminRegProxy.pingNode = __tars_AdminReg$pingNode$IF;

var __tars_AdminReg$restartServer$IF = {
    "name" : "restartServer",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nodeName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$restartServer$IE = function (application, serverName, nodeName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, nodeName);
    return os.getBinBuffer();
};

var __tars_AdminReg$restartServer$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(4, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$restartServer$PE = function (application, serverName, nodeName, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("nodeName", nodeName);
    return tup;
};

var __tars_AdminReg$restartServer$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$restartServer$ER = function (data) {
    throw _makeError(data, "Call AdminReg::restartServer failed");
};

tars.AdminRegProxy.prototype.restartServer = function (application, serverName, nodeName) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("restartServer", __tars_AdminReg$restartServer$PE(application, serverName, nodeName, version), arguments[arguments.length - 1], __tars_AdminReg$restartServer$IF).then(__tars_AdminReg$restartServer$PD, __tars_AdminReg$restartServer$ER);
    } else {
        return this._worker.tars_invoke("restartServer", __tars_AdminReg$restartServer$IE(application, serverName, nodeName), arguments[arguments.length - 1], __tars_AdminReg$restartServer$IF).then(__tars_AdminReg$restartServer$ID, __tars_AdminReg$restartServer$ER);
    }
};
tars.AdminRegProxy.restartServer = __tars_AdminReg$restartServer$IF;

var __tars_AdminReg$setTaskItemInfo$IF = {
    "name" : "setTaskItemInfo",
    "return" : "int32",
    "arguments" : [{
        "name" : "itemNo",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "info",
        "class" : "map(string, string)",
        "direction" : "in"
    }]
};

var __tars_AdminReg$setTaskItemInfo$IE = function (itemNo, info) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, itemNo);
    os.writeMap(2, info);
    return os.getBinBuffer();
};

var __tars_AdminReg$setTaskItemInfo$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$setTaskItemInfo$PE = function (itemNo, info, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("itemNo", itemNo);
    tup.writeMap("info", info);
    return tup;
};

var __tars_AdminReg$setTaskItemInfo$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$setTaskItemInfo$ER = function (data) {
    throw _makeError(data, "Call AdminReg::setTaskItemInfo failed");
};

tars.AdminRegProxy.prototype.setTaskItemInfo = function (itemNo, info) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("setTaskItemInfo", __tars_AdminReg$setTaskItemInfo$PE(itemNo, info, version), arguments[arguments.length - 1], __tars_AdminReg$setTaskItemInfo$IF).then(__tars_AdminReg$setTaskItemInfo$PD, __tars_AdminReg$setTaskItemInfo$ER);
    } else {
        return this._worker.tars_invoke("setTaskItemInfo", __tars_AdminReg$setTaskItemInfo$IE(itemNo, info), arguments[arguments.length - 1], __tars_AdminReg$setTaskItemInfo$IF).then(__tars_AdminReg$setTaskItemInfo$ID, __tars_AdminReg$setTaskItemInfo$ER);
    }
};
tars.AdminRegProxy.setTaskItemInfo = __tars_AdminReg$setTaskItemInfo$IF;

var __tars_AdminReg$shutdownNode$IF = {
    "name" : "shutdownNode",
    "return" : "int32",
    "arguments" : [{
        "name" : "name",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$shutdownNode$IE = function (name) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, name);
    return os.getBinBuffer();
};

var __tars_AdminReg$shutdownNode$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(2, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$shutdownNode$PE = function (name, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("name", name);
    return tup;
};

var __tars_AdminReg$shutdownNode$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$shutdownNode$ER = function (data) {
    throw _makeError(data, "Call AdminReg::shutdownNode failed");
};

tars.AdminRegProxy.prototype.shutdownNode = function (name) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("shutdownNode", __tars_AdminReg$shutdownNode$PE(name, version), arguments[arguments.length - 1], __tars_AdminReg$shutdownNode$IF).then(__tars_AdminReg$shutdownNode$PD, __tars_AdminReg$shutdownNode$ER);
    } else {
        return this._worker.tars_invoke("shutdownNode", __tars_AdminReg$shutdownNode$IE(name), arguments[arguments.length - 1], __tars_AdminReg$shutdownNode$IF).then(__tars_AdminReg$shutdownNode$ID, __tars_AdminReg$shutdownNode$ER);
    }
};
tars.AdminRegProxy.shutdownNode = __tars_AdminReg$shutdownNode$IF;

var __tars_AdminReg$startServer$IF = {
    "name" : "startServer",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nodeName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$startServer$IE = function (application, serverName, nodeName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, nodeName);
    return os.getBinBuffer();
};

var __tars_AdminReg$startServer$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(4, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$startServer$PE = function (application, serverName, nodeName, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("nodeName", nodeName);
    return tup;
};

var __tars_AdminReg$startServer$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$startServer$ER = function (data) {
    throw _makeError(data, "Call AdminReg::startServer failed");
};

tars.AdminRegProxy.prototype.startServer = function (application, serverName, nodeName) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("startServer", __tars_AdminReg$startServer$PE(application, serverName, nodeName, version), arguments[arguments.length - 1], __tars_AdminReg$startServer$IF).then(__tars_AdminReg$startServer$PD, __tars_AdminReg$startServer$ER);
    } else {
        return this._worker.tars_invoke("startServer", __tars_AdminReg$startServer$IE(application, serverName, nodeName), arguments[arguments.length - 1], __tars_AdminReg$startServer$IF).then(__tars_AdminReg$startServer$ID, __tars_AdminReg$startServer$ER);
    }
};
tars.AdminRegProxy.startServer = __tars_AdminReg$startServer$IF;

var __tars_AdminReg$stopServer$IF = {
    "name" : "stopServer",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nodeName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$stopServer$IE = function (application, serverName, nodeName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, nodeName);
    return os.getBinBuffer();
};

var __tars_AdminReg$stopServer$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(4, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$stopServer$PE = function (application, serverName, nodeName, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("nodeName", nodeName);
    return tup;
};

var __tars_AdminReg$stopServer$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$stopServer$ER = function (data) {
    throw _makeError(data, "Call AdminReg::stopServer failed");
};

tars.AdminRegProxy.prototype.stopServer = function (application, serverName, nodeName) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("stopServer", __tars_AdminReg$stopServer$PE(application, serverName, nodeName, version), arguments[arguments.length - 1], __tars_AdminReg$stopServer$IF).then(__tars_AdminReg$stopServer$PD, __tars_AdminReg$stopServer$ER);
    } else {
        return this._worker.tars_invoke("stopServer", __tars_AdminReg$stopServer$IE(application, serverName, nodeName), arguments[arguments.length - 1], __tars_AdminReg$stopServer$IF).then(__tars_AdminReg$stopServer$ID, __tars_AdminReg$stopServer$ER);
    }
};
tars.AdminRegProxy.stopServer = __tars_AdminReg$stopServer$IF;

var __tars_AdminReg$undeploy$IF = {
    "name" : "undeploy",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nodeName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "user",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "log",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_AdminReg$undeploy$IE = function (application, serverName, nodeName, user) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, nodeName);
    os.writeString(4, user);
    return os.getBinBuffer();
};

var __tars_AdminReg$undeploy$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "log" : is.readString(5, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$undeploy$PE = function (application, serverName, nodeName, user, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("nodeName", nodeName);
    tup.writeString("user", user);
    return tup;
};

var __tars_AdminReg$undeploy$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "log" : tup.readString("log")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$undeploy$ER = function (data) {
    throw _makeError(data, "Call AdminReg::undeploy failed");
};

tars.AdminRegProxy.prototype.undeploy = function (application, serverName, nodeName, user) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("undeploy", __tars_AdminReg$undeploy$PE(application, serverName, nodeName, user, version), arguments[arguments.length - 1], __tars_AdminReg$undeploy$IF).then(__tars_AdminReg$undeploy$PD, __tars_AdminReg$undeploy$ER);
    } else {
        return this._worker.tars_invoke("undeploy", __tars_AdminReg$undeploy$IE(application, serverName, nodeName, user), arguments[arguments.length - 1], __tars_AdminReg$undeploy$IF).then(__tars_AdminReg$undeploy$ID, __tars_AdminReg$undeploy$ER);
    }
};
tars.AdminRegProxy.undeploy = __tars_AdminReg$undeploy$IF;

var __tars_AdminReg$updatePatchLog$IF = {
    "name" : "updatePatchLog",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nodeName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "patchId",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "user",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "patchType",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "succ",
        "class" : "bool",
        "direction" : "in"
    }]
};

var __tars_AdminReg$updatePatchLog$IE = function (application, serverName, nodeName, patchId, user, patchType, succ) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, nodeName);
    os.writeString(4, patchId);
    os.writeString(5, user);
    os.writeString(6, patchType);
    os.writeBoolean(7, succ);
    return os.getBinBuffer();
};

var __tars_AdminReg$updatePatchLog$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$updatePatchLog$PE = function (application, serverName, nodeName, patchId, user, patchType, succ, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("nodeName", nodeName);
    tup.writeString("patchId", patchId);
    tup.writeString("user", user);
    tup.writeString("patchType", patchType);
    tup.writeBoolean("succ", succ);
    return tup;
};

var __tars_AdminReg$updatePatchLog$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_AdminReg$updatePatchLog$ER = function (data) {
    throw _makeError(data, "Call AdminReg::updatePatchLog failed");
};

tars.AdminRegProxy.prototype.updatePatchLog = function (application, serverName, nodeName, patchId, user, patchType, succ) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("updatePatchLog", __tars_AdminReg$updatePatchLog$PE(application, serverName, nodeName, patchId, user, patchType, succ, version), arguments[arguments.length - 1], __tars_AdminReg$updatePatchLog$IF).then(__tars_AdminReg$updatePatchLog$PD, __tars_AdminReg$updatePatchLog$ER);
    } else {
        return this._worker.tars_invoke("updatePatchLog", __tars_AdminReg$updatePatchLog$IE(application, serverName, nodeName, patchId, user, patchType, succ), arguments[arguments.length - 1], __tars_AdminReg$updatePatchLog$IF).then(__tars_AdminReg$updatePatchLog$ID, __tars_AdminReg$updatePatchLog$ER);
    }
};
tars.AdminRegProxy.updatePatchLog = __tars_AdminReg$updatePatchLog$IF;



